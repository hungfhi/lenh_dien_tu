#0
kind: Namespace
apiVersion: v1
metadata:
  name: $NAMESPACE

---
#1
kind: Secret
apiVersion: v1
metadata:
  name: $gitlab_pull_image_secret
  namespace: $NAMESPACE
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: $TOKEN_GITALB_HAIVAN

---
#2
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $NAME
  namespace: $NAMESPACE
  labels:
    app: $NAME
spec:
  selector:
    matchLabels:
      app: $NAME
  replicas: $replicas
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: $NAME
    spec:
      #      securityContext:
      ##        runAsUser: 33
      ##        runAsGroup: 33
      #        fsGroup: 33
      containers:
        - name: $NAME
          image: $TAG_COMMIT
          ports:
            - containerPort: $port
              protocol: TCP
              name: http
          env:
            - name: REDIS_PORT
              value: '6379'
            - name: TZ
              value: $Timezone
          resources:
            requests:
              memory: $MEMORY
              cpu:  $CPU
            limits:
              memory: $MEMORY_LIMIT
              cpu: $CPU_LIMIT
          livenessProbe:
            httpGet:
              path: /
              port: $port
              scheme: HTTP
            initialDelaySeconds: 120
            timeoutSeconds: 3
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          # Time to start container
          startupProbe:
            httpGet:
              port: $port
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 5
            successThreshold: 1
            timeoutSeconds: 2
          # Check container ready request after created
          readinessProbe:
            httpGet:
              port: $port
              path: /
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 2
          lifecycle:
            postStart:
              exec:
                command:
                  - sh
                  - "-c"
                  - |
                    /bin/sh <<'EOF'
                     sleep 10;

            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]

      imagePullSecrets:
        - name: $gitlab_pull_image_secret


---
#3
apiVersion: v1
kind: Service
metadata:
  name: $NAME
  namespace: $NAMESPACE
  labels:
    app: $NAME
spec:
  selector:
    app: $NAME
  ports:
    - protocol: TCP
      port: $port
      targetPort: $port
      name: http
---
#4
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $NAME
  namespace: $NAMESPACE
  labels:
    "use-http01-solver": "true"
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/proxy-body-size: "25m"
    nginx.ingress.kubernetes.io/ssl-redirect: 'true'
#    nginx.ingress.kubernetes.io/proxy-buffering: 'on'
#    nginx.ingress.kubernetes.io/configuration-snippet: |
#      proxy_cache static-cache;
#      proxy_cache_valid any 60m;
#      add_header X-Cache-Status $upstream_cache_status;

spec:
  tls:
    - hosts:
        - $DOMAIN
      secretName: $NAME-tls
  rules:
    - host: $DOMAIN
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: $NAME
                port:
                  number: $port


---
#5
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: $NAME
  namespace: $NAMESPACE
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: $NAME
  minReplicas: $minReplicas
  maxReplicas: $maxReplicas
  # Thực hiện scale CPU hoạt động ở 50% so với CPU mà POD yêu cầu
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: $averageUtilization

#---
#apiVersion: apps/v1
#kind: StatefulSet
#metadata:
#  name: redis
#  namespace: $NAMESPACE
#spec:
#  selector:
#    matchLabels:
#      app: redis  # has to match .spec.template.metadata.labels
#  serviceName: redis
#  replicas: 1
#  template:
#    metadata:
#      labels:
#        app: redis  # has to match .spec.selector.matchLabels
#    spec:
#      containers:
#        - name: redis
#          image: redis:6.2
#          imagePullPolicy: Always
#          args: ["--appendonly", "yes", "--save", "900", "1", "--save", "30", "1"]
#          ports:
#            - containerPort: 6379
#              name: redis
#          volumeMounts:
#            - mountPath: /data
#              name: data
#          resources:
#            limits:
#              memory: "1000M"
#              cpu: "500m"
#            requests:
#              memory: "200M"
#              cpu: "200m"
#  volumeClaimTemplates:
#    - metadata:
#        name: data
#      spec:
#        accessModes:
#          - ReadWriteOnce
#        resources:
#          requests:
#            storage: 2Gi
#
#
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: redis
#  namespace: $NAMESPACE
#spec:
#  ports:
#    - port: 6379
#      name: redis
#  type: ClusterIP
#  selector:
#    app: redis

